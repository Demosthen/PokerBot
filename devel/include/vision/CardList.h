// Generated by gencpp from file vision/CardList.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_CARDLIST_H
#define VISION_MESSAGE_CARDLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace vision
{
template <class ContainerAllocator>
struct CardList_
{
  typedef CardList_<ContainerAllocator> Type;

  CardList_()
    : cards()
    , coords()
    , count(0)  {
    }
  CardList_(const ContainerAllocator& _alloc)
    : cards(_alloc)
    , coords(_alloc)
    , count(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _cards_type;
  _cards_type cards;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _coords_type;
  _coords_type coords;

   typedef uint8_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::vision::CardList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::CardList_<ContainerAllocator> const> ConstPtr;

}; // struct CardList_

typedef ::vision::CardList_<std::allocator<void> > CardList;

typedef boost::shared_ptr< ::vision::CardList > CardListPtr;
typedef boost::shared_ptr< ::vision::CardList const> CardListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::CardList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::CardList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vision': ['/home/cc/ee106a/fl21/class/ee106a-afr/ros_workspaces/pokerbot/src/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::CardList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::CardList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::CardList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::CardList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::CardList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::CardList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::CardList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "995f141894c990e15bdbb5ec7c1d8be3";
  }

  static const char* value(const ::vision::CardList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x995f141894c990e1ULL;
  static const uint64_t static_value2 = 0x5bdbb5ec7c1d8be3ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::CardList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/CardList";
  }

  static const char* value(const ::vision::CardList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::CardList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] cards\n\
geometry_msgs/Point[] coords\n\
uint8 count\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vision::CardList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::CardList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cards);
      stream.next(m.coords);
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CardList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::CardList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::CardList_<ContainerAllocator>& v)
  {
    s << indent << "cards[]" << std::endl;
    for (size_t i = 0; i < v.cards.size(); ++i)
    {
      s << indent << "  cards[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cards[i]);
    }
    s << indent << "coords[]" << std::endl;
    for (size_t i = 0; i < v.coords.size(); ++i)
    {
      s << indent << "  coords[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.coords[i]);
    }
    s << indent << "count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_CARDLIST_H
